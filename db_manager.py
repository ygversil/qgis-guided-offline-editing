# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GuidedOfflineEditingPlugin layer_list.py
                                 A QGIS plugin
 Extend the built-in Offline Editing Plugin providing automated processes
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-06-08
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Yann Vot√©
        email                : ygversil@lilo.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from collections.abc import Callable

from psycopg2.extras import DictCursor
from qgis.core import QgsDataSourceUri
import psycopg2


class EditableLayerDownloader(Callable):
    """Wraps just enough to connect to a PostgreSQL database using QGIS3 new
    authentication system and download list of editable layers."""

    def __init__(self, host='localhost', port=5432, dbname='qgis',
                 schema='common', authcfg='authorg'):
        uri = QgsDataSourceUri()
        uri.setConnection(aHost=host, aPort=str(port), aDatabase=dbname,
                          aUsername='', aPassword='', authConfigId=authcfg)
        self.conn_info = uri.connectionInfo(True)
        self.editable_layer_schema = schema

    def __call__(self):
        with psycopg2.connect(self.conn_info) as conn, \
                conn.cursor(cursor_factory=DictCursor) as cur:
            cur.execute(
                "select lyr.legend_title as title, "
                "obj_description("
                "format('%s.%s', lyr.schema_name, lyr.table_name)::regclass"
                ") as comments, "
                "lyr.schema_name, "
                "lyr.table_name, "
                "geom.f_geometry_column as geometry_column, "
                "geom.srid as geometry_srid, "
                "geom.type as geometry_type "
                "from {schema}.editable_layer as lyr "
                "left join geometry_columns as geom "
                "on (lyr.schema_name, lyr.table_name) = "
                "(geom.f_table_schema, geom.f_table_name)".format(
                    schema=self.editable_layer_schema,
                )
            )
            yield from cur
