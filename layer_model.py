# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GuidedOfflineEditingPlugin layer_list.py
                                 A QGIS plugin
 Extend the built-in Offline Editing Plugin providing automated processes
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-06-08
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Yann Vot√©
        email                : ygversil@lilo.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from collections import OrderedDict, namedtuple

from PyQt5.QtCore import QAbstractTableModel, QVariant, Qt


_LAYER_TABLE_HEADERS = OrderedDict((
    ('title', 'Title'),
    ('comments', 'Comments'),
    ('geometry_srid', 'SRID'),
    ('geometry_type', 'Geometry Type'),
))
_LAYER_ATTRS = list(_LAYER_TABLE_HEADERS.keys())


EditableLayer = namedtuple('Layer', _LAYER_ATTRS)


class EditableLayerTableModel(QAbstractTableModel):
    """Qt table model representing available editable layers."""

    def __init__(self, parent=None, **kwargs):
        super().__init__(parent, **kwargs)
        self.available_layers = []

    def rowCount(self, parent=None):
        """Returns the number of rows under the given parent."""
        return len(self.available_layers)

    def columnCount(self, parent=None):
        """Returns the number of columns for the children of the given
        parent."""
        return len(_LAYER_ATTRS)

    def data(self, index, role=Qt.DisplayRole):
        """Returns the data stored under the given role for the item referred
        to by the index."""
        if not index.isValid() or role != Qt.DisplayRole:
            return QVariant()
        else:
            return QVariant(
                getattr(self.available_layers[index.row()],
                        _LAYER_ATTRS[index.column()])
            )

    def headerData(self, section, orientation, role=Qt.DisplayRole):
        """Returns the data for the given role and section in the header with
        the specified orientation."""
        if role != Qt.DisplayRole:
            return QVariant()
        if orientation == Qt.Horizontal:
            try:
                return self.tr(_LAYER_TABLE_HEADERS[_LAYER_ATTRS[section]])
            except IndexError:
                return QVariant()
        else:
            return QVariant(str(section + 1))

    def addLayer(self, layer):
        """Add the given layer to the list of available editable layers."""
        self.available_layers.append(layer)
