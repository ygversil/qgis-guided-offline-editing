# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GuidedOfflineEditingPlugin layer_list.py
                                 A QGIS plugin
 Extend the built-in Offline Editing Plugin providing automated processes
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-06-08
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Yann Vot√©
        email                : ygversil@lilo.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from collections import OrderedDict, namedtuple

from PyQt5.QtCore import QObject, QStringListModel, Qt, pyqtSignal
from qgis.core import QgsDataSourceUri, QgsProject

from .db_manager import PostgresProjectDownloader


_IS_OFFLINE_EDITABLE = 'isOfflineEditable'
_REMOTE_PROVIDER = 'remoteProvider'
_REMOTE_SOURCE = 'remoteSource'
_LAYER_TABLE_HEADERS = OrderedDict((
    ('layer_id', None),  # None means: do not show in dialog
    ('title', 'Title'),
    ('comments', 'Comments'),
    ('schema_name', None),
    ('table_name', None),
    ('geometry_column', None),
    ('geometry_srid', 'SRID'),
    ('geometry_type', 'Type'),
))
LAYER_ATTRS = tuple(_LAYER_TABLE_HEADERS.keys())


PostgresLayer = namedtuple('PostgresLayer', LAYER_ATTRS)


class PostgresProjectListModel(QObject):
    """Qt list model representing available projects saved in PostgreSQL."""

    model_changed = pyqtSignal()

    def __init__(self, host, port, dbname, schema, authcfg, sslmode, *args,
                 **kwargs):
        super().__init__(*args, **kwargs)
        self.host = host
        self.port = port
        self.dbname = dbname
        self.schema = schema
        self.authcfg = authcfg
        self.sslmode = sslmode
        self.model = QStringListModel()

    def refresh_data(self):
        """Refresh the list of projects saved in PostgreSQL."""
        fetch_projects = PostgresProjectDownloader(
            host=self.host,
            port=self.port,
            dbname=self.dbname,
            schema=self.schema,
            authcfg=self.authcfg,
            sslmode=self.sslmode,
        )
        self.model.setStringList(list(fetch_projects()))
        self.model_changed.emit()

    def project_at_index(self, index):
        """Return the name of project at given index."""
        return self.model.data(index, Qt.DisplayRole)


class OfflineLayerListModel(QObject):
    """Represents offline layers in a QGIS project."""

    model_changed = pyqtSignal()

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.offline_layers = dict()
        self._pg_layers = []
        self.model = QStringListModel()

    def refresh_data(self):
        """Refresh the offline layers dict from QGIS project legend."""
        self.offline_layers.clear()
        proj = QgsProject.instance()
        self.offline_layers.update(filter(
            lambda item: item[1].customProperty(_IS_OFFLINE_EDITABLE),
            proj.mapLayers().items()
        ))
        self.model.setStringList(
            layer.name() for layer in self.offline_layers.values()
        )
        self.save_to_pg_layers()
        self.model_changed.emit()

    def save_to_pg_layers(self):
        """Save information about offline layers to list of ``PostgresLayer``
        instances."""
        self._pg_layers.clear()
        for qgs_layer in self.offline_layers.values():
            remote_source = qgs_layer.customProperty(_REMOTE_SOURCE)
            uri = QgsDataSourceUri(remote_source)
            self._pg_layers.append(
                PostgresLayer(
                    layer_id=None, title=None, comments=None,
                    schema_name=uri.schema(),
                    table_name=uri.table(),
                    geometry_column=uri.geometryColumn(),
                    geometry_srid=None,
                    geometry_type=None,
                )
            )

    def synced_layer_ids(self):
        """Yield each layer ids that was synchronized online after offline."""
        proj = QgsProject.instance()
        for _, qgs_layer in proj.mapLayers().items():
            if qgs_layer.customProperty(_IS_OFFLINE_EDITABLE):
                continue
            provider = qgs_layer.dataProvider()
            if provider.name() != 'postgres':
                continue
            uri = QgsDataSourceUri(provider.dataSourceUri())
            pg_layer = PostgresLayer(
                layer_id=None, title=None, comments=None,
                schema_name=uri.schema(),
                table_name=uri.table(),
                geometry_column=uri.geometryColumn(),
                geometry_srid=None,
                geometry_type=None,

            )
            if any(offline_layer == pg_layer
                   for offline_layer in self._pg_layers):
                yield qgs_layer.id()
